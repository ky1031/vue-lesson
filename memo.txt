vue メモ
======================================================================
ディレクティブ
======================================================================
▼v-html
Mustache構文　だとエスケープされてしまうhtmlタグをhtmlタグとして扱うことができる

▼v-bind
v-bind:classはcssのクラスを動的に切り替えたい時に使用します。
v-bind:src, v-bind:hrefなどなど
省略記法 → [ : ]

▼v-show
式が真のときのみ要素を表示する、cssのdisplayプロパティを変更しています。

▼v-if
真偽を判定して要素を表示させるディレクティブ
「DOM」が消えます。

▼v-for
配列やオブジェクトをループ処理してマークアップ部分の表示制御をする
v-forディレクティブでループしている要素に対しては、v-bind:keyディレクティブにその要素として識別できる一意な値を指定することが推奨されています。

▼v-on
要素にイベントを付与する
v-on:click
省略記法 → [ @ ]

▼v-slot
複数のスロットが必要だというケース
親にv-slot:headと指定して
子にname="head"とname属性を指定する
v-slot:defaultでデフォルトを明示的に指定できる
省略記法 → [ # ]

▼v-model
これはフォーム部品の値をバインディングする
inputタグやselectタグのバインディングに使う
type属性によって内部での処理が異なる

======================================================================
その他
======================================================================
▼「.vue」拡張子のファイル
単一ファイルコンポーネントと呼ばれる形式のファイル
単一ファイルコンポーネントの特徴としては、マークアップ(html)、ロジック(js)、スタイル(css)全てをそのファイル内に記述できることにあります。

▼コンポーネント
ページを構成する部品

▼「data」メソッド
プロパティを定義しておくことができる
ここで定義されるプロパティはリアクティブなプロパティになります

▼インライン
値に直接オブジェクトを指定すること

▼uuid
ユニークな乱数を生成する
「uuid」や、「vue-uuid」を使用して:keyの値を乱数で指定できる

▼slotについて
親側のコンポーネントから子のコンポーネントにhtmlを含む任意のコンテンツを差し込むことができる機能

▼フォールバックコンテンツ
代替のコンテンツ
slotのコンテンツ部分がないときにデフォルトの表示を設定できる

▼methodsについて
Vueインスタンス内で使用したいメソッドを定義する

▼computedについて(算出プロパティ)
依存しているリアクティブなプロパティに変更があった際に実行されます
methodsとの違いはリアクティブプロパティの変更があった際に再描画されても処理が行われない

▼propsについて
親コンポーネントのデータを子のコンポーネントに受け渡す
受け取ったデータを変更しようとすると警告が出る（親と子のどちらで変更されているかわからないから）
親コンポーネントのデータは更新されない
データの変更は親コンポーネントで行う
propsはオブジェクト形式でより詳細に定義するべきで、少なくともtypeだけは指定することが推奨されています。
エラーは出るが表示される

▼dataの追加
Vueインスタンスが作成された時点でdata内のプロパティがリアクティブプロパティとして追加されます。
Vueインスタンスが作成された後にリアクティブプロパティを追加することはできません。

▼dataの変更
data内の配列を変更する際、Vue.jsでは下記の手段では変更することができません。
-配列のインデックスに対して直接指定して代入する場合
JavaScriptの組み込みメソッドを使用することで配列をリアクティブに変更できる

▼オブジェクトの変更
オブジェクトのプロパティを動的に追加することは可能
this.$set(this.classObject, 'is-large', true);

▼watchについて
data内の値の変更を監視して、変更されたときに実行したい処理をwatch内に定義することができます。
メソッド名は監視したいdataのプロパティ名を指定する

▼オブジェクトの監視
data内のオブジェクトの値の変更を監視するには、deep: trueというプロパティを指定する必要があります。

▼双方向バインディング
フォームというのは基本的にユーザーが値をなにかしら入力し、その値を元にサーバーに情報を送信する
・ロジック側で制御しているdata内の値のバインディング
・ユーザーが入力したinputタグの値のバインディング

▼emit
$emit()の第1引数に発火させたいイベント名を指定します。
第2引数に現在の値を渡すことで親コンポーネント側で値の更新ができる



▼ライフサイクルについて
Vueインスタンスが初期化されてから破棄されるまでの過程のことです。
初期化の過程の中で、特定の処理を差し込みたい時にライフサイクルフックという関数を使う
-brforeCreate
Vueインスタンスが初期化される前に実行
-created
Vueインスタンスが初期化された後に実行
APIにリクエストを送信してデータを取得し、リアクティブプロパティに追加していく処理はcreated内に記述していくと良い
-beforeMount
「DOM」がマウント（「.vue」ファイルに記述したマークアップ部分が反映されること）の直前に実行されます。
-mounted
「DOM」がマウントされた直後に一度だけ実行されます。
「DOM」を参照する場合は、このタイミングで参照することになります。
-beforeUpdate
リアクティブプロパティが変更されて変更されたデータが「DOM」に反映される前に実行されます。
-updated
リアクティブプロパティが変更されて変更されたデータが「DOM」に反映された後に実行されます。
-beforeDestory
Vueインスタンスが破棄される直前に実行されます。
-destroy
Vueインスタンスが破棄された後に呼び出されます。


▼import axios from 'axios';
「axios」はプロミスベースのHTTPクライアントのモジュール

▼Vuexについて
Vuexとは、Vue.jsを使用したアプリケーションのための状態管理ライブラリです。
複数のコンポーネントで同じ「data」にアクセスしたいという場合
親->子->孫->曽孫のように「props」を受け渡したい時にどのコンポーネントからでも同じ「data」にアクセスできるようにリアクティブプロパティを定義し管理することができます。

▼storeの作成
「store」とは、Vue.jsアプリケーション全体で使用する「state」を管理する役割を持っています。



======================================================================
todo メモ
======================================================================
